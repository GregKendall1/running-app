import pandas as pd
from datetime import datetime as dt
from datetime import date, timedelta
import matplotlib.pyplot as plt
import streamlit as st

def filter_by_date(start_date,end_date,df):
    """Filters the dataframe between two given dates"""
    df = df[(df['start_date']>= start_date)&(df['start_date']<= end_date)]
    return df

def group_weekly_average(df,column):
    """Returns dataframe grouped weekly and averaging given column value"""
    grouped_df = df[['start_date',column]]
    grouped_df['start_date'] = pd.to_datetime(grouped_df['start_date'])
    grouped_df = grouped_df.groupby([pd.Grouper(key='start_date', freq='W-MON')])[column].mean().reset_index().sort_values('start_date')
    return grouped_df

def plot_avg_hr_zones(df):
    """Plots average of each heart rate zone weekly"""
    fig = plt.figure(figsize=(5,5))
    for i in range(1,6):
        df_filter = df[(heart_rate_zones[i-1] <=df['average_heartrate'])&(df['average_heartrate'] <= heart_rate_zones[i])]
        df_filter = group_weekly_average(df_filter,'average_heartrate')
        plt.plot(df_filter['start_date'],df_filter['average_heartrate'],'-o')
    # Put legend below current axis
    ax.legend(labels=["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5"],loc='upper center', bbox_to_anchor=(0.5, -0.2),fancybox=False, shadow=False, ncol=5,framealpha=0)
    plt.xlabel("Date")
    plt.ylabel("Average heart rate (bpm)")
    fig.patch.set_alpha(0)
    ax.patch.set_alpha(0)
    plt.setp(ax.get_xticklabels(), rotation=30, horizontalalignment='right', fontsize='x-small')    #ensure x labels don't overlap
    st.pyplot(fig)
    
def plot_heart_rate_pie_chart(df):
    """Plots a pie chart showing proportion of runs in each zone"""
    fig = plt.figure(figsize=(5,5))
    df['bins'] = pd.cut(df['average_heartrate'],bins=heart_rate_zones, labels=["Zone 1","Zone 2","Zone 3","Zone 4","Zone 5"])
    bin_percent = pd.DataFrame(df['bins'].value_counts(normalize=True) * 100).reset_index()
    plt.pie(bin_percent['proportion'],labels=bin_percent['bins'],autopct='%1.1f%%')
    fig.patch.set_alpha(0)
    st.pyplot(fig)
    
def check_heartrate(max_heartrate):
    """Check if heart rate which has been entered is numerical and greater than minimum seen heart rate"""
    try:
        max_heartrate = int(max_heartrate)
    except:
        st.error("Please enter a numerical value as the max heart rate.")
        return False
    if max_heartrate < min(df['average_heartrate']) :
        st.error(f"Please enter your maximum heart rate correctly. The maximum average heart rate in your runs is {max(df['average_heartrate'])}.")   
        return False
    else:
        return True

if __name__ == '__main__':
    if "df" not in st.session_state:
        st.error("Please download your Strava data first.")
        st.stop()
    heart_rate_zones = [0,130,145,165,190,200]  #set default values 

    df = st.session_state.df
    #only need to look at activities which have heart rate data for this page
    df = df[df['has_heartrate']==True]      
    st.title("Heart rate plots")
    max_heartrate = st.text_input("Please enter your maximum heart rate:")
    with st.sidebar:
        st.header("Choose dates")
        container1 = st.container()
        if st.button("Last 7 days"):
            start_date = date.today() - timedelta(days = 7)
            end_date = date.today() 
            st.session_state['button'] = [start_date,end_date]
        if st.button("Last 4 weeks"):
            start_date = date.today() - timedelta(weeks = 4)
            end_date = date.today() 
            st.session_state['button'] = [start_date,end_date]
        if st.button("Last 12 months"):
            start_date = date.today() - timedelta(weeks = 52.14)
            end_date = date.today()
            st.session_state['button'] = [start_date,end_date]
        with container1:
            if 'button' in st.session_state:    #updates labels if a button has been clicked            
                start_date = st.date_input("Start date",value = st.session_state['button'][0],min_value=min(df['start_date']),max_value =date.today())
                end_date = st.date_input("End date", value = st.session_state['button'][1],min_value=min(df['start_date']),max_value=date.today())
            else:
                start_date = st.date_input("Start date",value = min(df['start_date']),min_value=min(df['start_date']),max_value =date.today())
                end_date = st.date_input("End date",value = date.today(),min_value=min(df['start_date']),max_value=date.today())
            if end_date < start_date:
                st.warning("Please enter an end date which is later than the start date. It will default to the current date.")
                end_date = max(df['start_date'])
    df = filter_by_date(start_date,end_date,df)
    if df.empty:
        st.error("No runs found in range!")
        st.stop()
    if check_heartrate(max_heartrate):      #if max heart rate has 'reasonable' value 
        max_heartrate = int(max_heartrate)
        heart_rate_zones = [0,max_heartrate*0.6,max_heartrate*0.7,max_heartrate*0.82,max_heartrate*0.92,max_heartrate]
        if max_heartrate < max(df['average_heartrate']):
            st.warning("You have entered a maximum heart rate which is lower than the maximum heart rate in your run data. Please check if this is correct.")
        col1,col2 = st.columns(2)
        with col1:
            st.write("The following shows the average heartrate in each zone every week.")
            plot_avg_hr_zones(df)
        with col2:
            st.write("The following shows you how much time you spend in each heart rate zone overall.")
            plot_heart_rate_pie_chart(df)
       

   
