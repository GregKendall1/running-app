import folium
import polyline
import pandas as pd 
from datetime import datetime as dt
import streamlit as st

def filter_by_date(start_date,end_date,df):
    """Filters the dataframe between two given dates"""
    start_date = dt.strptime(start_date, '%Y-%m-%d')
    end_date = dt.strptime(end_date,'%Y-%m-%d')
    df = df[(df['start_date']>= start_date)&(df['start_date']<= end_date)]
    return df
    
def get_long_coordinates(encoded_route):
    """Get longitude coordinates for given run"""
    coordinates = polyline.decode(encoded_route)
    ride_longitudes = [coordinate[1] for coordinate in coordinates]
    return ride_longitudes

def get_lat_coordinates(encoded_route):
    """Get latitude coordinates for given run"""

    coordinates = polyline.decode(encoded_route)
    ride_latitudes = [coordinate[0] for coordinate in coordinates]
    return ride_latitudes

def get_route_coordinates(lat,long):
    """Creates list of route coordinates for a run"""
    coords = []
    for i in range(len(lat)):
        coords.append((lat[i],long[i]))
    return coords

def get_average_coords(df):
    """Gets average coordinates of run starts"""
    lats = []
    longs = []
    for x in df['start_latlng']:
        if x:
            lats.append(x[0])
            longs.append(x[1])
    return sum(lats)/float(len(lats)),sum(longs)/float(len(longs))

if __name__ == '__main__':
    if "df" not in st.session_state:
        st.error("Please download your Strava data first.")
        st.stop()
    df = st.session_state.df
    st.sidebar.header("Choose dates")
    start_date = st.sidebar.date_input("Start date",value = min(df['start_date']),min_value=min(df['start_date']),max_value =date.today())
    end_date = st.sidebar.date_input("End date",value = date.today(),min_value=min(df['start_date']),max_value=date.today())
    if end_date < start_date:
        st.sidebar.warning("Please enter an end date which is later than the start date.")
        end_date = date.today()
    df = filter_by_date(start_date,end_date,df)
    if df.empty:
        st.error("No runs found in range!")
        st.stop()

    df['lat_coords'] = df['map.summary_polyline'].apply(get_lat_coordinates)
    df['long_coords'] = df['map.summary_polyline'].apply(get_long_coordinates)
    df['route_coords'] = df[['lat_coords','long_coords']].apply(lambda x: get_route_coordinates(x.lat_coords, x.long_coords), axis=1)
    
    ave_lat,ave_long = get_average_coords(df)
    
    route_map = folium.Map(
        location=[ave_lat, ave_long],
        zoom_start=14,
        tiles="Cartodb Positron",
        width=1024,
        height=600,
    )
    
    coord_big = []
    for idx,x in df[['route_coords']].iterrows():
        if x.iloc[0] != []:
            folium.PolyLine(x.iloc[0], weight=1,color='orange', popup=folium.Popup(
                        html=(
                              'Date: '
                            + str(df['start_date'].loc[idx])
                            + '<br>'
                            + 'Distance: '
                            + str(df['distance'].loc[idx])
                            + ' miles'
                            + '<br>'
                        ),
                        min_width=100,
                        max_width=100,
                    ),).add_to(route_map)
    
    st.title("Map of runs")
    
    st.components.v1.html(folium.Figure().add_child(route_map).render(), height=500)
